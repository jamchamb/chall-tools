#!/usr/bin/env python
import argparse
import binascii
from etao import num_to_letter


def gen(buf_max, n):
    result = 'A' * buf_max

    cur_char = 0
    for i in range(0, n - buf_max, 4):
        cur_char = (cur_char + 1) % 25
        result += num_to_letter(cur_char + 2) * 4

    return result


def main():
    parser = argparse.ArgumentParser(description='generate output test buffer')
    parser.add_argument('-x', '--hex', action='store_true',
                        help='output buffer in hexadecimal')
    parser.add_argument('buf_max', type=int, help='size of target buffer')
    parser.add_argument('out_length', type=int, help='desired output length')
    args = parser.parse_args()

    result = gen(args.buf_max, args.out_length)

    if args.hex:
        print binascii.hexlify(result)
    else:
        print result

if __name__ == '__main__':
    main()
